							ADT
							     
								 --------Abstract Data Type


								 
								 
1.简介

		抽象数据类型(Abstract Data Type 简称ADT)是指一个数学模型以及定义在此数学模型上的一组操作。
		
抽象数据类型需要通过固有数据类型（高级编程语言中已实现的数据类型）来实现。




2.抽象类与接口

		对于面向对象编程来说，抽象是它的一大特征之一。在Java中，可以通过两种形式来体现OOP的抽象：
		
接口和抽象类。

		(1)抽象类
		
			a.抽象方法是一种特殊的方法：它只有声明，而没有具体的实现。抽象方法的声明格式为：
			
					abstract void fun();
					
			b.如果一个类含有抽象方法，则称这个类为抽象类，抽象类必须在类前用abstract关键字修饰。
			
					[public] abstract class ClassName {
							abstract void fun();
					}
					
			c.抽象类和普通类的主要有三点区别：

　　			1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，
				子类便无法实现该方法），缺省情况下默认为public。

　			  　2）抽象类不能用来创建对象；

　			  　3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现
				父类的抽象方法，则必须将子类也定义为为abstract类。
				
		
		
		(2)接口
			
			a.接口，英文称作interface，在软件工程中，接口泛指供别人调用的方法或者函数
			
					[public] interface InterfaceName {
 
					}
					
			b.接口是一种极度抽象的类型，它比抽象类更加“抽象”，并且一般情况下不在接口中定义变量。
				
					1)接口中的变量会被隐式地指定为public static final变量（并且只能是
					public static final变量，用private修饰会报编译错误）
					
					2)接口中的方法会被隐式地指定为public abstract方法且只能是public abstract方法
					（用其他关键字，比如private、protected、static、 final等修饰会报编译错误）
					
			c.如果一个非抽象类遵循了某个接口，就必须实现该接口中的所有方法。
				对于遵循某个接口的抽象类，可以不实现该接口中的抽象方法
			
			
				
		(3)区别
		

　　		1）抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；

　　		2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；

　　		3）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；

　　		4）一个类只能继承一个抽象类，而一个类却可以实现多个接口。


3.JDK8中的接口default

		
		Java 8发布以后，可以给接口添加新方法，但是，接口仍然可以和它的实现类保持兼容。
		
这非常重要，因为你开发的类库可能正在被多个开发者广泛的使用着。而Java 8之前，在类库中

发布了一个接口以后，如果在接口中添加一个新方法，那些实现了这个接口的应用使用新版本的接

口就会有崩溃的危险。

		在Java 8中，接口中的方法可以被实现。接口中被实现的方法叫做default方法，用关键字
		
default作为修饰符来标识。当一个类实现一个接口的时候，它可以实现已经在接口中被实现过的方法，

但这不是必须的。这个类会继承default方法。这就是为什么当接口发生改变的时候，实现类不需要做

改动的原因。

		Java 8试图避免不明确的东西，保持严谨。如果一个方法在多个接口中都有声明，那么，任何一
		
个default实现都不会被继承，你将会得到一个编译时错误。